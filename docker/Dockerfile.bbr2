ARG BASE_IMAGE
FROM ${BASE_IMAGE}

# disable terminal interaction for apt
ENV DEBIAN_FRONTEND=noninteractive
ENV SHELL /bin/bash
SHELL ["/bin/bash", "-c"]

ENV ROS_DISTRO=humble
ENV ROS_ROOT=/opt/ros/${ROS_DISTRO}

RUN apt install python3-pip wget lsb-release gnupg curl && pip install vcstool || pip3 install vcstool && pip install -U colcon-common-extensions || pip3 install -U colcon-common-extensions

RUN mkdir -p /opt/gz-sim && mkdir -p /opt/gz-sim/src && cd /opt/gz-sim/src && wget https://raw.githubusercontent.com/ignition-tooling/gazebodistro/master/collection-fortress.yaml && vcs import < collection-fortress.yaml && wget https://packages.osrfoundation.org/gazebo.gpg -O /usr/share/keyrings/pkgs-osrf-archive-keyring.gpg && echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/pkgs-osrf-archive-keyring.gpg] http://packages.osrfoundation.org/gazebo/ubuntu-stable $(lsb_release -cs) main" | sudo tee /etc/apt/sources.list.d/gazebo-stable.list > /dev/null && apt-get update && apt -y install $(sort -u $(find . -iname 'packages-'`lsb_release -cs`'.apt' -o -iname 'packages.apt' | grep -v '/\.git/') | sed '/ignition\|sdf/d' | tr '\n' ' ') && cd /opt/gz-sim && colcon build --merge-install --cmake-args -DCMAKE_BUILD_TYPE=RelWithDebInfo -DCMAKE_C_FLAGS=-fPIC -DCMAKE_POSITION_INDEPENDENT_CODE=ON && . /opt/gz-sim/install/setup.bash && rm -Rf /opt/gz-sim/build /opt/gz-sim/src /opt/gz-sim/log

ENV GZ_VERSION=fortress

RUN apt-get update && mkdir -p ${ROS_ROOT}/src && cd ${ROS_ROOT}/src \
    && git clone https://github.com/ros/xacro.git -b ros2 \
    && git clone https://github.com/rudislabs/actuator_msgs.git \
    && git clone https://github.com/gazebosim/ros_gz.git -b humble \
    && source ${ROS_ROOT}/setup.bash && cd ${ROS_ROOT} \
    && rosdep install -y -r --ignore-src --from-paths src --rosdistro ${ROS_DISTRO} \
    && colcon build --merge-install \
    && rm -Rf src build log \
&& rm -rf /var/lib/apt/lists/* \
&& apt-get clean

# set environment variables
ENV TERM linux
ENV MVIMPACT_ACQUIRE_DIR /opt/mvIMPACT_Acquire
ENV MVIMPACT_ACQUIRE_DATA_DIR /opt/mvIMPACT_Acquire/data
ENV GENICAM_GENTL64_PATH /opt/mvIMPACT_Acquire/lib/arm64
ENV GENICAM_ROOT /opt/mvIMPACT_Acquire/runtime
ENV container docker

# update packets and install minimal requirements
# after installation it will clean apt packet cache
RUN apt-get update && apt-get -y install build-essential \
    iproute2 && \
    apt-get clean && \
    rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*

# move the directory mvIMPACT_Acquire with *.tgz and *.sh files to the container
COPY mvIMPACT_Acquire /var/lib/mvIMPACT_Acquire

# execute the setup script in an unattended mode
RUN cd /var/lib/mvIMPACT_Acquire && \
    ./install_mvGenTL_Acquire_ARM.sh -u && \
    rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*

# Install python requirements
RUN apt-get update && pip install --no-cache-dir -r requirements.txt && pip install jupyter && apt-get clean && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*

RUN jupyter --config-dir
RUN mkdir -p /root/.jupyter
RUN echo "c.NotebookApp.contents_manager_class = 'notebook.services.contents.largefilemanager.LargeFileManager'" >> /root/.jupyter/jupyter_notebook_config.py

ENV CUDNN_V8_API_ENABLED=1
ENV TORCH_CUDNN_V8_API_ENABLED=1